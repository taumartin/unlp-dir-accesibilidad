services:
  db:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "54320:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  portal:
    build:
      context: ./appfront
      dockerfile: Dockerfile
    container_name: angular_frontend
    restart: "no"
    env_file:
      - .env
    environment:
      API_BASE_URL: ${API_BASE_URL}
    volumes:
      - portal_build:/app/dist/appfront/browser
    command: [ "npm", "run", "build:docker", "--prod" ]

  api:
    build:
      context: ./apiback
      dockerfile: Dockerfile
    container_name: express_api
    restart: always
    depends_on:
      db:
        condition: service_started
      portal:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      DB_CONNECTION_STRING_PROD: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      CORS_ALLOWED_ORIGIN: ${API_BASE_URL}
    ports:
      - "3000:3000"
    volumes:
      - portal_build:/api/public_portal
      - ./apiback:/api
    command: [ "npm", "run", "start:docker" ]

  migrations:
    build: ./apiback
    container_name: migrations_service
    depends_on:
      - db
    env_file:
      - .env
    environment:
      DB_CONNECTION_STRING_PROD: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - ./apiback:/api
    command: [ "sh", "-c", "npx sequelize db:migrate" ]
    restart: "no"

  seeds:
    build: ./apiback
    container_name: seeds_service
    depends_on:
      - db
    env_file:
      - .env
    environment:
      DB_CONNECTION_STRING_PROD: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - ./apiback:/api
    command: [ "sh", "-c", "npx sequelize db:seed:all" ]
    restart: "no"

volumes:
  postgres_data:
  portal_build:
